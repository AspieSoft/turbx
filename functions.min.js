const fs=require("fs"),{join}=require("path"),common=require("./common.min"),tagFunctions={};function addTagFunction(n,t){if(Array.isArray(n)||(n=[n]),(n=n.filter((n=>"string"==typeof n&&!tagFunctions[n])).map((n=>n.toLowerCase().replace(/[-_]/g,"")))).length){Array.isArray(t)?t=t.filter((n=>["string","function"].includes(typeof n))).map((n=>"string"==typeof n?n.toLowerCase().replace(/[-_]/g,""):n)):"string"==typeof t&&(t=t.toLowerCase().replace(/[-_]/g,"")),tagFunctions[n[0]]=t;for(let t=1;t<n.length;t++)"string"!=typeof n[t]||tagFunctions[n[t]]||(tagFunctions[n[t]]=n[0])}}function runTagFunction(n){n=n.toLowerCase().replace(/[-_]/g,"");let t=tagFunctions[n];if("string"==typeof t&&(t=tagFunctions[t]),"function"==typeof t){let n=[...arguments];return n.shift(),t(...n)}return""}const commonFunc={...common,runFunc:runTagFunction};fs.readdir(join(__dirname,"functions"),((n,t)=>{if(!n)for(let n=0;n<t.length;n++){let e=require(join(__dirname,"functions",t[n]));if("function"==typeof e&&(e=e(commonFunc)),"object"!=typeof e)return;let o=Object.keys(e);for(let n=0;n<o.length;n++)"name"!==o[n]&&"func"!==o[n]&&"function"!==o[n]&&addTagFunction(o[n],e[o[n]]);if(e.name||(e.name=t[n].replace(/\.[^\.]+$/,"")),!e.func&&e.function)e.func=e.function;else if(!e.func)return;addTagFunction(e.name,e.func)}})),module.exports={tagFunctions,addTagFunction,runTagFunction};